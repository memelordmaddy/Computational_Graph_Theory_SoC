// https://atcoder.jp/contests/abc305/tasks/abc305_e
#include<bits/stdc++.h>
using namespace std;
int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    int N, M, K;
    cin >> N >> M >> K;
    
    vector<vector<int>> graph(N);
    for (int i = 0; i < M; ++i) {
        int a, b;
        cin >> a >> b;
        --a; --b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    vector<int> p(K), h(K);
    for (int i = 0; i < K; ++i) {
        cin >> p[i] >> h[i];
        --p[i];
    }

    vector<int> distances(N, -1);
    priority_queue<pair<int, int>> pq;

    auto update_distance = [&](int node, int distance) {
        if (distances[node] < distance) {
            distances[node] = distance;
            pq.emplace(distance, node);
        }
    };

    for (int i = 0; i < K; ++i) {
        update_distance(p[i], h[i]);
    }

    while (!pq.empty()) {
        auto [dist, node] = pq.top();
        pq.pop();
        if (distances[node] != dist) continue;

        for (auto& neighbor : graph[node]) {
            update_distance(neighbor, distances[node] - 1);
        }
    }

    vector<int> result;
    for (int i = 0; i < N; ++i) {
        if (distances[i] >= 0) {
            result.push_back(i + 1);
        }
    }

    cout << result.size() << "\n";
    for (size_t i = 0; i < result.size(); ++i) {
        cout << result[i] << " \n"[i + 1 == result.size()];
    }

    return 0;
}
